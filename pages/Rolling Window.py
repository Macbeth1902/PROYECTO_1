import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
import datetime
from scipy.stats import norm, t
from utils import obtener_datos, rendimientos_logaritmicos

##Configuraos la p√°gina en Streamlit
st.set_page_config(page_title="üìä An√°lisis de Riesgo en los Rendimientos", layout="wide")

## Introducci√≥n a la p√°gina: 
st.markdown("""
## üìà Sobre las M√©tricas de Riesgo
En esta secci√≥n, se aplicaron dos m√©tricas de riesgo sobre los rendimientos diarios de la acci√≥n de Google: 
- **Value at Risk (VaR)** 
- **Expected Shortfall (ES)**

Asimismo, se emplearon dos enfoques distintos para el c√°lculo de dichas m√©tricas:
1. **Param√©trico:** Se asume una distribuci√≥n normal de los rendimientos logar√≠tmicos.
2. **Hist√≥rico:** Se basa en los datos observados de los rendimientos logar√≠tmicos.

Cada m√©trica se calcul√≥ bajo niveles de confianza del **95% y 99%**, utilizando una ventana de 252 d√≠as. Lo anterior facilit√≥ contar con una mejor visualizaci√≥n 
            de la evoluci√≥n del riesgo de la acci√≥n, a lo largo del periodo estudiado.
""")

## Definimos el tama√±o de la ventana
tama√±o_ventana = 252

## Hacemos la carga de datos, con spinner para el tiempo de espera
with st.spinner('‚è≥ Cargando datos...'):
    df = obtener_datos(['GOOGL'])
    df_logrendimientos = rendimientos_logaritmicos(df)

## Para evitar errores en el c√≥digo, convertimos la columna de fechas a una columna por separado:
df_logrendimientos['Date'] = df_logrendimientos.index

## Obtenemos la media y la desviaci√≥n est√°ndar de los rendimientos logar√≠tmicos
rolling_mean = df_logrendimientos['Returns'].rolling(window=tama√±o_ventana).mean()
rolling_std = df_logrendimientos['Returns'].rolling(window=tama√±o_ventana).std()

## Calculamos el VaR hist√≥rico y param√©trico al 95% y 99%

## VaR Param√©trico al 95%
VaR_95_Para = norm.ppf(1-0.95, rolling_mean, rolling_std)
VaR_Para_df_95 = pd.DataFrame({'Date': df_logrendimientos.index, '95% VaR Param√©trico': VaR_95_Para.squeeze()})
VaR_Para_df_95.set_index('Date', inplace=True)
VaR_Para_df_95 = VaR_Para_df_95.dropna()

## VaR Param√©trico al 99%
VaR_99_Para = norm.ppf(1-0.99, rolling_mean, rolling_std)
VaR_Para_df_99 = pd.DataFrame({'Date': df_logrendimientos.index, '99% VaR Param√©trico': VaR_99_Para.squeeze()})
VaR_Para_df_99.set_index('Date', inplace=True)
VaR_Para_df_99 = VaR_Para_df_99.dropna()

## VaR Hist√≥rico al 95%
VaR_95_hist = df_logrendimientos['Returns'].rolling(window=tama√±o_ventana).quantile(0.05)
vaR_hist_df_95 = pd.DataFrame({'Date': df_logrendimientos.index, '95% VaR Hist√≥rico': VaR_95_hist.squeeze()})
vaR_hist_df_95.set_index('Date', inplace=True)
vaR_hist_df_95 = vaR_hist_df_95.dropna()

## VaR Hist√≥rico al 99%
VaR_99_hist = df_logrendimientos['Returns'].rolling(window=tama√±o_ventana).quantile(0.01)
vaR_hist_df_99 = pd.DataFrame({'Date': df_logrendimientos.index, '99% VaR Hist√≥rico': VaR_99_hist.squeeze()})
vaR_hist_df_99.set_index('Date', inplace=True)
vaR_hist_df_99 = vaR_hist_df_99.dropna()

## Calculamos el ES hist√≥rico y param√©trico al 95% y 99%
## ES Hist√≥rico al 95%
ES_95_hist_df = df_logrendimientos['Returns'].rolling(window=tama√±o_ventana).apply(lambda x: x[x <= x.quantile(0.05)].mean())
ES_95_hist_df = ES_95_hist_df.dropna()
ES_95_hist_df = ES_95_hist_df.rename( "ES hist√≥rico al 95%")

## ES Hist√≥rico al 99%
ES_99_hist_df = df_logrendimientos['Returns'].rolling(window=tama√±o_ventana).apply(lambda x: x[x <= x.quantile(0.01)].mean())
ES_99_hist_df = ES_99_hist_df.dropna()
ES_99_hist_df = ES_99_hist_df.rename( "ES hist√≥rico al 99%")

## ES Param√©trico al 95%
ES_95_Para_df = df_logrendimientos['Returns'].rolling(window=tama√±o_ventana).apply(lambda x: x[x <= norm.ppf(1-0.95, np.mean(x), np.std(x))].mean())
ES_95_Para_df = ES_95_Para_df.dropna()
ES_95_Para_df = ES_95_Para_df.rename( "ES param√©trico al 95%")

## ES Param√©trico al 99%
ES_99_Para_df = df_logrendimientos['Returns'].rolling(window=tama√±o_ventana).apply(lambda x: x[x <= norm.ppf(1-0.99, np.mean(x), np.std(x))].mean())
ES_99_Para_df = ES_99_Para_df.dropna()
ES_99_Para_df = ES_99_Para_df.rename( "ES param√©trico al 99%")

## Definimos opciones para la selecci√≥n de m√©tricas en nuestro gr√°fico:
opciones_metricas = [
    "VaR Hist√≥rico 95%",
    "VaR Hist√≥rico 99%",
    "VaR Param√©trico 95%",
    "VaR Param√©trico 99%",
    "ES Hist√≥rico 95%",
    "ES Hist√≥rico 99%",
    "ES Param√©trico 95%",
    "ES Param√©trico 99%",
    "Todas las m√©tricas"
]

## Utilizamos un multiselect para que el usuario pueda elegir las m√©tricas que desea visualizar
seleccion = st.multiselect("Selecciona las m√©tricas a visualizar:", opciones_metricas, default=["Todas las m√©tricas"])

## Si el usuario selecciona "Todas las m√©tricas", mostramos todas
if "Todas las m√©tricas" in seleccion:
    seleccion = opciones_metricas[:-1]

## Creamos la gr√°fica
st.subheader("üìà Rendimientos logar√≠tmicos diarios con m√©tricas de riesgo")
plt.figure(figsize=(14, 7))

## Graficamos los rendimientos logar√≠tmicos
plt.plot(df_logrendimientos.index, df_logrendimientos['Returns'] * 100, label='Rendimientos Logar√≠tmicos Diarios (%)', color='#7F7FFF', alpha=0.8)

## Graficamos solo las m√©tricas seleccionadas
if "VaR Hist√≥rico 95%" in seleccion:
    plt.plot(vaR_hist_df_95.index, vaR_hist_df_95['95% VaR Hist√≥rico'] * 100, label='VaR Hist√≥rico 95%', color='darkblue')

if "VaR Hist√≥rico 99%" in seleccion:
    plt.plot(vaR_hist_df_99.index, vaR_hist_df_99['99% VaR Hist√≥rico'] * 100, label='VaR Hist√≥rico 99%', color='darkorange')

if "VaR Param√©trico 95%" in seleccion:
    plt.plot(VaR_Para_df_95.index, VaR_Para_df_95['95% VaR Param√©trico'] * 100, label='VaR Param√©trico 95%', color='mediumseagreen')

if "VaR Param√©trico 99%" in seleccion:
    plt.plot(VaR_Para_df_99.index, VaR_Para_df_99['99% VaR Param√©trico'] * 100, label='VaR Param√©trico 99%', color='firebrick')

if "ES Hist√≥rico 95%" in seleccion:
    plt.plot(ES_95_hist_df.index, ES_95_hist_df * 100, label='ES Hist√≥rico 95%', color='darkviolet')

if "ES Hist√≥rico 99%" in seleccion:
    plt.plot(ES_99_hist_df.index, ES_99_hist_df * 100, label='ES Hist√≥rico 99%', color='gold')

if "ES Param√©trico 95%" in seleccion:
    plt.plot(ES_95_Para_df.index, ES_95_Para_df * 100, label='ES Param√©trico 95%', color='dodgerblue')

if "ES Param√©trico 99%" in seleccion:
    plt.plot(ES_99_Para_df.index, ES_99_Para_df * 100, label='ES Param√©trico 99%', color='tan')


plt.title('Rendimientos Logar√≠tmicos Diarios con M√©tricas de Riesgo')
plt.xlabel('Fecha')
plt.ylabel('Valor (%)')
plt.legend()
plt.grid(True)
plt.tight_layout()

## Mostramos la gr√°fica en Streamlit
st.pyplot(plt)

st.markdown("""
De manera general, se observa que el VaR siempre se encuentra por debajo del ES, lo cual es esperado, ya que el ES promedia las p√©rdidas que superan el VaR.
""")


## Para mayor claridad, mostramos las m√©tricas de riesgo en un dataframe. Esta continuaci√≥n es el ejercicio e)
st.subheader("üìäN√∫mero de Violaciones del VaR o del ES registradas")
st.markdown("""
### üìå **Evaluaci√≥n de la Precisi√≥n del VaR y ES**
Para evaluar la eficiencia de nuestras estimaciones de **VaR** y **ES**, analizamos el n√∫mero y porcentaje de violaciones de nuestras medidas de riesgo sobre los rendimientos logar√≠tmicos reales de **Google**.

‚úÖ **Regla general**: Se considera que una buena estimaci√≥n de riesgo debe generar un porcentaje de violaciones inferior pero cercano al **2.5%**.  
üìã A continuaci√≥n, se presenta una tabla con los resultados obtenidos:
""", unsafe_allow_html=True)

## Definimos el dataframe con las medidas de riesgo:
df_Medidas_Riesgo = pd.concat([df_logrendimientos['Returns'].iloc[tama√±o_ventana-1:], vaR_hist_df_95, vaR_hist_df_99, VaR_Para_df_95, VaR_Para_df_99, ES_95_hist_df, ES_95_Para_df, ES_99_hist_df, ES_99_Para_df], axis=1)

violaciones_VaR_hist_95 = (df_Medidas_Riesgo['Returns'] < df_Medidas_Riesgo['95% VaR Hist√≥rico']).sum()
porcentaje_violaciones_VaR_hist_95 = (violaciones_VaR_hist_95 / len(df_Medidas_Riesgo)) * 100
#print("El porcentaje de violaciones para el VaR hist√≥rico al 95% es de: " , porcentaje_violaciones_VaR_hist_95.round(4), "%" )

violaciones_VaR_hist_99 = (df_Medidas_Riesgo['Returns'] < df_Medidas_Riesgo['99% VaR Hist√≥rico']).sum()
porcentaje_violaciones_VaR_hist_99 = (violaciones_VaR_hist_99 / len(df_Medidas_Riesgo)) * 100
#print("El porcentaje de violaciones para el VaR hist√≥rico al 99% es de: " , porcentaje_violaciones_VaR_hist_99.round(4), "%" )

violaciones_VaR_Para_95 = (df_Medidas_Riesgo['Returns'] < df_Medidas_Riesgo['95% VaR Param√©trico']).sum()
porcentaje_violaciones_VaR_Para_95 = (violaciones_VaR_Para_95 / len(df_Medidas_Riesgo)) * 100
#print("El porcentaje de violaciones para el VaR param√©trico al 95% es de: " , porcentaje_violaciones_VaR_Para_95.round(4), "%" )

violaciones_VaR_Para_99 = (df_Medidas_Riesgo['Returns'] < df_Medidas_Riesgo['99% VaR Param√©trico']).sum()
porcentaje_violaciones_VaR_Para_99 = (violaciones_VaR_Para_99 / len(df_Medidas_Riesgo)) * 100
#print("El porcentaje de violaciones para el VaR param√©trico al 99% es de: " , porcentaje_violaciones_VaR_Para_99.round(4), "%" )

violaciones_ES_hist_95 = (df_Medidas_Riesgo['Returns'] < df_Medidas_Riesgo['ES hist√≥rico al 95%']).sum()
porcentaje_violaciones_ES_hist_95 = (violaciones_ES_hist_95 / len(df_Medidas_Riesgo)) * 100
#print("El porcentaje de violaciones para el ES hist√≥rico al 95% es de: " , porcentaje_violaciones_ES_hist_95.round(4), "%" )

violaciones_ES_hist_99 = (df_Medidas_Riesgo['Returns'] < df_Medidas_Riesgo['ES hist√≥rico al 99%']).sum()
porcentaje_violaciones_ES_hist_99 = (violaciones_ES_hist_99 / len(df_Medidas_Riesgo)) * 100
#print("El porcentaje de violaciones para el ES hist√≥rico al 99% es de: " , porcentaje_violaciones_ES_hist_99.round(4), "%" )

violaciones_ES_Para_95 = (df_Medidas_Riesgo['Returns'] < df_Medidas_Riesgo['ES param√©trico al 95%']).sum()
porcentaje_violaciones_ES_Para_95 = (violaciones_ES_Para_95 / len(df_Medidas_Riesgo)) * 100
#print("El porcentaje de violaciones para el ES param√©trico al 95% es de: " , porcentaje_violaciones_ES_Para_95.round(4), "%" )

violaciones_ES_Para_99 = (df_Medidas_Riesgo['Returns'] < df_Medidas_Riesgo['ES param√©trico al 99%']).sum()
porcentaje_violaciones_ES_Para_99 = (violaciones_ES_Para_99 / len(df_Medidas_Riesgo)) * 100
#print("El porcentaje de violaciones para el ES param√©trico al 99% es de: " , porcentaje_violaciones_ES_Para_99.round(4), "%" )

df_porcentaje_y_numero_de_violaciones = (pd.DataFrame({'VaR Hist√≥rico al 95%': [porcentaje_violaciones_VaR_hist_95, violaciones_VaR_hist_95],
                                                      'VaR Hist√≥rico al 99%': [porcentaje_violaciones_VaR_hist_99, violaciones_VaR_hist_99],
                                                      'VaR Param√©trico al 95%': [porcentaje_violaciones_VaR_Para_95, violaciones_VaR_Para_95],
                                                      'VaR Param√©trico al 99%': [porcentaje_violaciones_VaR_Para_99, violaciones_VaR_Para_99],
                                                      'ES Hist√≥rico al 95%': [porcentaje_violaciones_ES_hist_95, violaciones_ES_hist_95],
                                                      'ES Hist√≥rico al 99%': [porcentaje_violaciones_ES_hist_99, violaciones_ES_hist_99],
                                                      'ES Param√©trico al 95%': [porcentaje_violaciones_ES_Para_95, violaciones_ES_Para_99],
                                                      'ES Param√©trico al 99%': [porcentaje_violaciones_ES_Para_99, violaciones_ES_Para_99]}, index = ["Porcentaje de Violaciones", "N√∫mero de Violaciones"])).T
df_porcentaje_y_numero_de_violaciones["Porcentaje de Violaciones"] = df_porcentaje_y_numero_de_violaciones["Porcentaje de Violaciones"].astype(float)
df_porcentaje_y_numero_de_violaciones['N√∫mero de Violaciones'] = df_porcentaje_y_numero_de_violaciones['N√∫mero de Violaciones'].astype(int)

## Mostramos nuestro DataFrame con mejor formato
st.dataframe(df_porcentaje_y_numero_de_violaciones.style.format({
    "Porcentaje de Violaciones": "{:.2f}%",  # Aqu√≠ agregamos el s√≠mbolo '%'
    "N√∫mero de Violaciones": "{:,}"  # Separador de miles
}).set_properties(**{
    'text-align': 'center',
    'font-size': '14px'
}).set_table_styles([{
    'selector': 'thead th',
    'props': [('background-color', '#004c99'), ('color', 'white'), ('font-weight', 'bold')]
}, {
    'selector': 'tbody td',
    'props': [('border', '1px solid #ddd'), ('padding', '8px')]
}]))

st.markdown("""
### üìä **Conclusiones finales**  

‚úÖ **VaR 95%**: Tanto el **Hist√≥rico** como el **Param√©trico** presentan un **alto porcentaje de violaciones**, lo cual indica que se subestima el riesgo.  
‚úÖ **VaR 99%**: M√°s confiable, pero se sigue sobrepasando el **2.5%**. 

El **Expected Shortfall (ES)** muestra estimaciones m√°s precisas, en comparaci√≥n con el VaR:  
- El **ES 95%** (**Param√©trico e Hist√≥rico**) ofrecen mejores resultados, con valores m√°s cercanos al **2.5%**.  
- El **ES 99%** (**Param√©trico e Hist√≥rico**) se tiene una tendencia a sobreestimar el riesgo.

Se recomienda, para este caso particular, el **ES Param√©trico al 95%** como la mejor herramienta para evaluar el riesgo de la acci√≥n de Google, pues
            su porcentaje de violaciones es el m√°s cercano al **2.5%**. Si, por otro lado, lo que se busca es una estimaci√≥n m√°s conservadora, el **ES Param√©trico al 99%** es la mejor opci√≥n.
""")
